{"version":3,"sources":["components/JokeCard.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","card","marginBottom","cardContent","paddingRight","JokeCard","joke","favorite","addToFavoriteJokes","removeFromFavoriteJokes","rest","classes","Card","className","Box","p","display","justifyContent","alignItems","xs","sm","CardContent","Typography","variant","CardActions","IconButton","aria-label","color","onClick","id","Spinner","textAlign","CircularProgress","App","React","useState","loading","setLoading","currentTab","setCurrentTab","currentPage","setCurrentPage","totalPages","setTotalPages","jokesToShow","setJokesToShow","favoriteJokes","setFavoriteJokes","useEffect","getJokes","getFavoriteJokesFromLS","a","fetch","method","headers","Accept","res","json","data","total_pages","results","console","log","JSON","parse","localStorage","getItem","newFavoriteJokes","find","j","setItem","stringify","filter","observeElement","element","observer","IntersectionObserver","entries","isIntersecting","prevCurrentPage","unobserve","threshold","observe","lastJokeEl","document","getElementById","length","Fragment","CssBaseline","Container","style","maxWidth","align","margin","fontSize","AppBar","position","Tabs","value","onChange","e","centered","Tab","label","aria-controls","Badge","badgeContent","role","hidden","my","map","index","key","some","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5e2fbacf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\n\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    marginBottom: 20,\r\n  },\r\n  cardContent: {\r\n    paddingRight: 0,\r\n  },\r\n});\r\n\r\nfunction JokeCard({\r\n  joke,\r\n  favorite,\r\n  addToFavoriteJokes,\r\n  removeFromFavoriteJokes,\r\n  ...rest\r\n}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.card} {...rest}>\r\n      <Box\r\n        p={2}\r\n        display=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems={{ xs: \"flex-end\", sm: \"center\" }}\r\n      >\r\n        <CardContent className={classes.cardContent}>\r\n          <Typography variant=\"body1\">{joke.joke}</Typography>\r\n        </CardContent>\r\n        <CardActions>\r\n          {favorite ? (\r\n            <IconButton\r\n              aria-label=\"unfavorite\"\r\n              color=\"secondary\"\r\n              onClick={() => removeFromFavoriteJokes(joke.id)}\r\n            >\r\n              <FavoriteIcon />\r\n            </IconButton>\r\n          ) : (\r\n            <IconButton\r\n              aria-label=\"favorite\"\r\n              color=\"secondary\"\r\n              onClick={() => addToFavoriteJokes(joke.id)}\r\n            >\r\n              <FavoriteBorderIcon />\r\n            </IconButton>\r\n          )}\r\n        </CardActions>\r\n      </Box>\r\n    </Card>\r\n  );\r\n}\r\n\r\nJokeCard.propTypes = {\r\n  joke: PropTypes.object.isRequired,\r\n  favorite: PropTypes.bool.isRequired,\r\n  addToFavoriteJokes: PropTypes.func.isRequired,\r\n  removeFromFavoriteJokes: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default JokeCard;\r\n","import React from \"react\";\r\n\r\nimport { Box, CircularProgress } from \"@material-ui/core\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <Box textAlign=\"center\" p={4}>\r\n      <CircularProgress color=\"secondary\" />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\nimport {\n  CssBaseline,\n  AppBar,\n  Container,\n  Tabs,\n  Tab,\n  Box,\n  Typography,\n  Badge,\n} from \"@material-ui/core\";\n\nimport { JokeCard, Spinner } from \"./components\";\n\nfunction App() {\n  const [loading, setLoading] = React.useState(false);\n  const [currentTab, setCurrentTab] = React.useState(0);\n\n  const [currentPage, setCurrentPage] = React.useState(1);\n  const [totalPages, setTotalPages] = React.useState(null);\n\n  const [jokesToShow, setJokesToShow] = React.useState([]);\n  const [favoriteJokes, setFavoriteJokes] = React.useState([]);\n\n  React.useEffect(() => {\n    getJokes();\n    // eslint-disable-next-line\n  }, [currentPage]);\n\n  React.useEffect(() => {\n    getFavoriteJokesFromLS();\n  }, []);\n\n  const getJokes = async () => {\n    setLoading(true);\n    try {\n      const res = await fetch(\n        `https://icanhazdadjoke.com/search?page=${currentPage}&limit=10`,\n        {\n          method: \"GET\",\n          headers: {\n            Accept: \"application/json\",\n          },\n        }\n      );\n\n      const data = await res.json();\n\n      setTotalPages(data.total_pages);\n      setJokesToShow([...jokesToShow, ...data.results]);\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n      setLoading(false);\n    }\n  };\n\n  const getFavoriteJokesFromLS = () => {\n    const favoriteJokes = JSON.parse(localStorage.getItem(\"favorites\"));\n    setFavoriteJokes(favoriteJokes || []);\n  };\n\n  const changeTab = (e, value) => {\n    setCurrentTab(value);\n  };\n\n  const addToFavoriteJokes = (id) => {\n    const joke = jokesToShow.find((j) => j.id === id);\n    const newFavoriteJokes = [joke, ...favoriteJokes];\n    setFavoriteJokes(newFavoriteJokes);\n    localStorage.setItem(\"favorites\", JSON.stringify(newFavoriteJokes));\n  };\n\n  const removeFromFavoriteJokes = (id) => {\n    const newFavoriteJokes = favoriteJokes.filter((j) => j.id !== id);\n    setFavoriteJokes(newFavoriteJokes);\n    localStorage.setItem(\"favorites\", JSON.stringify(newFavoriteJokes));\n  };\n\n  const addMoreJokes = () => {\n    if (currentPage < totalPages)\n      setCurrentPage((prevCurrentPage) => prevCurrentPage + 1);\n  };\n\n  const observeElement = (element) => {\n    if (!element) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        if (entries[0].isIntersecting === true) {\n          addMoreJokes();\n          observer.unobserve(element);\n        }\n      },\n      { threshold: 1 }\n    );\n\n    observer.observe(element);\n  };\n\n  React.useEffect(() => {\n    const lastJokeEl = document.getElementById(\n      `joke-${jokesToShow.length - 1}`\n    );\n    observeElement(lastJokeEl);\n    // eslint-disable-next-line\n  }, [jokesToShow]);\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container style={{ maxWidth: 1000 }}>\n        <Typography\n          variant=\"h1\"\n          align=\"center\"\n          style={{ margin: \"4rem 0\", fontSize: \"4rem\" }}\n        >\n          Jokes App\n        </Typography>\n        <AppBar position=\"sticky\" color=\"default\">\n          <Tabs\n            value={currentTab}\n            onChange={changeTab}\n            variant=\"fullWidth\"\n            centered\n          >\n            <Tab label=\"Jokes\" id=\"jokes-tab\" aria-controls=\"jokes-panel\" />\n            <Tab\n              label={\n                <Badge\n                  color=\"secondary\"\n                  badgeContent={\n                    favoriteJokes.length > 0 ? favoriteJokes.length : null\n                  }\n                >\n                  Favorites<span>&emsp;</span>\n                </Badge>\n              }\n              id=\"favorites-tab\"\n              aria-controls=\"favorites-panel\"\n            />\n          </Tabs>\n        </AppBar>\n        <Box role=\"tabpanel\" hidden={currentTab !== 0} my={4}>\n          {/* Joke Cards */}\n          {/* eslint-disable-next-line */}\n          {jokesToShow.map((joke, index) => (\n            <JokeCard\n              id={`joke-${index}`}\n              key={joke.id}\n              joke={joke}\n              favorite={favoriteJokes.some((j) => j.id === joke.id)}\n              addToFavoriteJokes={addToFavoriteJokes}\n              removeFromFavoriteJokes={removeFromFavoriteJokes}\n            />\n          ))}\n          {loading && <Spinner />}\n        </Box>\n        <Box role=\"tabpanel\" hidden={currentTab !== 1} my={4}>\n          {favoriteJokes.map((joke) => (\n            <JokeCard\n              key={joke.id}\n              joke={joke}\n              favorite={favoriteJokes.some((j) => j.id === joke.id)}\n              addToFavoriteJokes={addToFavoriteJokes}\n              removeFromFavoriteJokes={removeFromFavoriteJokes}\n            />\n          ))}\n        </Box>\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}